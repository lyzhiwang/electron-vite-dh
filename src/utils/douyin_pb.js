// source: douyin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.douyin.ChatMessage', null, global);
goog.exportSymbol('proto.douyin.Gift', null, global);
goog.exportSymbol('proto.douyin.GiftMessage', null, global);
goog.exportSymbol('proto.douyin.HeadersList', null, global);
goog.exportSymbol('proto.douyin.MemberMessage', null, global);
goog.exportSymbol('proto.douyin.Message', null, global);
goog.exportSymbol('proto.douyin.PushFrame', null, global);
goog.exportSymbol('proto.douyin.Response', null, global);
goog.exportSymbol('proto.douyin.User', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.HeadersList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.HeadersList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.HeadersList.displayName = 'proto.douyin.HeadersList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.PushFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.PushFrame.repeatedFields_, null);
};
goog.inherits(proto.douyin.PushFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.PushFrame.displayName = 'proto.douyin.PushFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.Message.displayName = 'proto.douyin.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.douyin.Response.repeatedFields_, null);
};
goog.inherits(proto.douyin.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.Response.displayName = 'proto.douyin.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.ChatMessage.displayName = 'proto.douyin.ChatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.MemberMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.MemberMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.MemberMessage.displayName = 'proto.douyin.MemberMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.GiftMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.GiftMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.GiftMessage.displayName = 'proto.douyin.GiftMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.User.displayName = 'proto.douyin.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.douyin.Gift = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.douyin.Gift, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.douyin.Gift.displayName = 'proto.douyin.Gift';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.HeadersList.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.HeadersList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.HeadersList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.HeadersList.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.HeadersList}
 */
proto.douyin.HeadersList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.HeadersList;
  return proto.douyin.HeadersList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.HeadersList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.HeadersList}
 */
proto.douyin.HeadersList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.HeadersList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.HeadersList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.HeadersList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.HeadersList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.douyin.HeadersList.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.HeadersList} returns this
 */
proto.douyin.HeadersList.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.douyin.HeadersList.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.HeadersList} returns this
 */
proto.douyin.HeadersList.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.PushFrame.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.PushFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.PushFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.PushFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.PushFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    seqid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    service: jspb.Message.getFieldWithDefault(msg, 3, 0),
    method: jspb.Message.getFieldWithDefault(msg, 4, 0),
    headerslistList: jspb.Message.toObjectList(msg.getHeaderslistList(),
    proto.douyin.HeadersList.toObject, includeInstance),
    payloadencoding: jspb.Message.getFieldWithDefault(msg, 6, ""),
    payloadtype: jspb.Message.getFieldWithDefault(msg, 7, ""),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.PushFrame}
 */
proto.douyin.PushFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.PushFrame;
  return proto.douyin.PushFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.PushFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.PushFrame}
 */
proto.douyin.PushFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeqid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLogid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setService(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMethod(value);
      break;
    case 5:
      var value = new proto.douyin.HeadersList;
      reader.readMessage(value,proto.douyin.HeadersList.deserializeBinaryFromReader);
      msg.addHeaderslist(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayloadencoding(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayloadtype(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.PushFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.PushFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.PushFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.PushFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeqid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLogid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getService();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMethod();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeaderslistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.douyin.HeadersList.serializeBinaryToWriter
    );
  }
  f = message.getPayloadencoding();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPayloadtype();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional uint64 seqid = 1;
 * @return {number}
 */
proto.douyin.PushFrame.prototype.getSeqid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.PushFrame} returns this
 */
proto.douyin.PushFrame.prototype.setSeqid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 logid = 2;
 * @return {number}
 */
proto.douyin.PushFrame.prototype.getLogid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.PushFrame} returns this
 */
proto.douyin.PushFrame.prototype.setLogid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 service = 3;
 * @return {number}
 */
proto.douyin.PushFrame.prototype.getService = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.PushFrame} returns this
 */
proto.douyin.PushFrame.prototype.setService = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 method = 4;
 * @return {number}
 */
proto.douyin.PushFrame.prototype.getMethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.PushFrame} returns this
 */
proto.douyin.PushFrame.prototype.setMethod = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated HeadersList headersList = 5;
 * @return {!Array<!proto.douyin.HeadersList>}
 */
proto.douyin.PushFrame.prototype.getHeaderslistList = function() {
  return /** @type{!Array<!proto.douyin.HeadersList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.HeadersList, 5));
};


/**
 * @param {!Array<!proto.douyin.HeadersList>} value
 * @return {!proto.douyin.PushFrame} returns this
*/
proto.douyin.PushFrame.prototype.setHeaderslistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.douyin.HeadersList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.HeadersList}
 */
proto.douyin.PushFrame.prototype.addHeaderslist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.douyin.HeadersList, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.PushFrame} returns this
 */
proto.douyin.PushFrame.prototype.clearHeaderslistList = function() {
  return this.setHeaderslistList([]);
};


/**
 * optional string payloadEncoding = 6;
 * @return {string}
 */
proto.douyin.PushFrame.prototype.getPayloadencoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.PushFrame} returns this
 */
proto.douyin.PushFrame.prototype.setPayloadencoding = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string payloadType = 7;
 * @return {string}
 */
proto.douyin.PushFrame.prototype.getPayloadtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.PushFrame} returns this
 */
proto.douyin.PushFrame.prototype.setPayloadtype = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes payload = 8;
 * @return {!(string|Uint8Array)}
 */
proto.douyin.PushFrame.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes payload = 8;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.douyin.PushFrame.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.douyin.PushFrame.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.douyin.PushFrame} returns this
 */
proto.douyin.PushFrame.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payload: msg.getPayload_asB64(),
    msgid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    msgtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0),
    needwrdsstore: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    wrdsversion: jspb.Message.getFieldWithDefault(msg, 7, 0),
    wrdssubkey: jspb.Message.getFieldWithDefault(msg, 8, 0),
    messageextraMap: (f = msg.getMessageextraMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.Message}
 */
proto.douyin.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.Message;
  return proto.douyin.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.Message}
 */
proto.douyin.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgtype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffset(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedwrdsstore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWrdsversion(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWrdssubkey(value);
      break;
    case 9:
      var value = msg.getMessageextraMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMsgtype();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getNeedwrdsstore();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getWrdsversion();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getWrdssubkey();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getMessageextraMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.douyin.Message.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.douyin.Message.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.douyin.Message.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.douyin.Message.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 msgId = 3;
 * @return {number}
 */
proto.douyin.Message.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setMsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 msgType = 4;
 * @return {number}
 */
proto.douyin.Message.prototype.getMsgtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setMsgtype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 offset = 5;
 * @return {number}
 */
proto.douyin.Message.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool needWrdsStore = 6;
 * @return {boolean}
 */
proto.douyin.Message.prototype.getNeedwrdsstore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setNeedwrdsstore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint64 wrdsVersion = 7;
 * @return {number}
 */
proto.douyin.Message.prototype.getWrdsversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setWrdsversion = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 wrdsSubKey = 8;
 * @return {number}
 */
proto.douyin.Message.prototype.getWrdssubkey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.setWrdssubkey = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<string, string> messageExtra = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.douyin.Message.prototype.getMessageextraMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.douyin.Message} returns this
 */
proto.douyin.Message.prototype.clearMessageextraMap = function() {
  this.getMessageextraMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.douyin.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageslistList: jspb.Message.toObjectList(msg.getMessageslistList(),
    proto.douyin.Message.toObject, includeInstance),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fetchinterval: jspb.Message.getFieldWithDefault(msg, 3, 0),
    now: jspb.Message.getFieldWithDefault(msg, 4, 0),
    internalext: jspb.Message.getFieldWithDefault(msg, 5, ""),
    fetchtype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    routeparamsMap: (f = msg.getRouteparamsMap()) ? f.toObject(includeInstance, undefined) : [],
    heartbeatduration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    needack: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    pushserver: jspb.Message.getFieldWithDefault(msg, 10, ""),
    livecursor: jspb.Message.getFieldWithDefault(msg, 11, ""),
    historynomore: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.Response}
 */
proto.douyin.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.Response;
  return proto.douyin.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.Response}
 */
proto.douyin.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.douyin.Message;
      reader.readMessage(value,proto.douyin.Message.deserializeBinaryFromReader);
      msg.addMessageslist(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFetchinterval(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNow(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInternalext(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFetchtype(value);
      break;
    case 7:
      var value = msg.getRouteparamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeartbeatduration(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedack(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPushserver(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLivecursor(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHistorynomore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageslistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.douyin.Message.serializeBinaryToWriter
    );
  }
  f = message.getCursor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFetchinterval();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNow();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getInternalext();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFetchtype();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getRouteparamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getHeartbeatduration();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getNeedack();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getPushserver();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLivecursor();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getHistorynomore();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * repeated Message messagesList = 1;
 * @return {!Array<!proto.douyin.Message>}
 */
proto.douyin.Response.prototype.getMessageslistList = function() {
  return /** @type{!Array<!proto.douyin.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.douyin.Message, 1));
};


/**
 * @param {!Array<!proto.douyin.Message>} value
 * @return {!proto.douyin.Response} returns this
*/
proto.douyin.Response.prototype.setMessageslistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.douyin.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.douyin.Message}
 */
proto.douyin.Response.prototype.addMessageslist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.douyin.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.clearMessageslistList = function() {
  return this.setMessageslistList([]);
};


/**
 * optional string cursor = 2;
 * @return {string}
 */
proto.douyin.Response.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setCursor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 fetchInterval = 3;
 * @return {number}
 */
proto.douyin.Response.prototype.getFetchinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setFetchinterval = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 now = 4;
 * @return {number}
 */
proto.douyin.Response.prototype.getNow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setNow = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string internalExt = 5;
 * @return {string}
 */
proto.douyin.Response.prototype.getInternalext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setInternalext = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 fetchType = 6;
 * @return {number}
 */
proto.douyin.Response.prototype.getFetchtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setFetchtype = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * map<string, string> routeParams = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.douyin.Response.prototype.getRouteparamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.clearRouteparamsMap = function() {
  this.getRouteparamsMap().clear();
  return this;};


/**
 * optional uint64 heartbeatDuration = 8;
 * @return {number}
 */
proto.douyin.Response.prototype.getHeartbeatduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setHeartbeatduration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool needAck = 9;
 * @return {boolean}
 */
proto.douyin.Response.prototype.getNeedack = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setNeedack = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string pushServer = 10;
 * @return {string}
 */
proto.douyin.Response.prototype.getPushserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setPushserver = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string liveCursor = 11;
 * @return {string}
 */
proto.douyin.Response.prototype.getLivecursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setLivecursor = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool historyNoMore = 12;
 * @return {boolean}
 */
proto.douyin.Response.prototype.getHistorynomore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.douyin.Response} returns this
 */
proto.douyin.Response.prototype.setHistorynomore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.douyin.User.toObject(includeInstance, f),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    visibletosender: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.ChatMessage}
 */
proto.douyin.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.ChatMessage;
  return proto.douyin.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.ChatMessage}
 */
proto.douyin.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.douyin.User;
      reader.readMessage(value,proto.douyin.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisibletosender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.douyin.User.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVisibletosender();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional User user = 2;
 * @return {?proto.douyin.User}
 */
proto.douyin.ChatMessage.prototype.getUser = function() {
  return /** @type{?proto.douyin.User} */ (
    jspb.Message.getWrapperField(this, proto.douyin.User, 2));
};


/**
 * @param {?proto.douyin.User|undefined} value
 * @return {!proto.douyin.ChatMessage} returns this
*/
proto.douyin.ChatMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.ChatMessage} returns this
 */
proto.douyin.ChatMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.ChatMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.douyin.ChatMessage.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.ChatMessage} returns this
 */
proto.douyin.ChatMessage.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool visibleToSender = 4;
 * @return {boolean}
 */
proto.douyin.ChatMessage.prototype.getVisibletosender = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.douyin.ChatMessage} returns this
 */
proto.douyin.ChatMessage.prototype.setVisibletosender = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.MemberMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.MemberMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.MemberMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.MemberMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.douyin.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.MemberMessage}
 */
proto.douyin.MemberMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.MemberMessage;
  return proto.douyin.MemberMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.MemberMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.MemberMessage}
 */
proto.douyin.MemberMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.douyin.User;
      reader.readMessage(value,proto.douyin.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.MemberMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.MemberMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.MemberMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.MemberMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.douyin.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 2;
 * @return {?proto.douyin.User}
 */
proto.douyin.MemberMessage.prototype.getUser = function() {
  return /** @type{?proto.douyin.User} */ (
    jspb.Message.getWrapperField(this, proto.douyin.User, 2));
};


/**
 * @param {?proto.douyin.User|undefined} value
 * @return {!proto.douyin.MemberMessage} returns this
*/
proto.douyin.MemberMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.MemberMessage} returns this
 */
proto.douyin.MemberMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.MemberMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.GiftMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.GiftMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.GiftMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.GiftMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.douyin.User.toObject(includeInstance, f),
    gift: (f = msg.getGift()) && proto.douyin.Gift.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.GiftMessage}
 */
proto.douyin.GiftMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.GiftMessage;
  return proto.douyin.GiftMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.GiftMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.GiftMessage}
 */
proto.douyin.GiftMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new proto.douyin.User;
      reader.readMessage(value,proto.douyin.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 15:
      var value = new proto.douyin.Gift;
      reader.readMessage(value,proto.douyin.Gift.deserializeBinaryFromReader);
      msg.setGift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.GiftMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.GiftMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.GiftMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.GiftMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.douyin.User.serializeBinaryToWriter
    );
  }
  f = message.getGift();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.douyin.Gift.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 7;
 * @return {?proto.douyin.User}
 */
proto.douyin.GiftMessage.prototype.getUser = function() {
  return /** @type{?proto.douyin.User} */ (
    jspb.Message.getWrapperField(this, proto.douyin.User, 7));
};


/**
 * @param {?proto.douyin.User|undefined} value
 * @return {!proto.douyin.GiftMessage} returns this
*/
proto.douyin.GiftMessage.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.GiftMessage} returns this
 */
proto.douyin.GiftMessage.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.GiftMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Gift gift = 15;
 * @return {?proto.douyin.Gift}
 */
proto.douyin.GiftMessage.prototype.getGift = function() {
  return /** @type{?proto.douyin.Gift} */ (
    jspb.Message.getWrapperField(this, proto.douyin.Gift, 15));
};


/**
 * @param {?proto.douyin.Gift|undefined} value
 * @return {!proto.douyin.GiftMessage} returns this
*/
proto.douyin.GiftMessage.prototype.setGift = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.douyin.GiftMessage} returns this
 */
proto.douyin.GiftMessage.prototype.clearGift = function() {
  return this.setGift(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.douyin.GiftMessage.prototype.hasGift = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.User.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shortid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signature: jspb.Message.getFieldWithDefault(msg, 5, ""),
    level: jspb.Message.getFieldWithDefault(msg, 6, 0),
    birthday: jspb.Message.getFieldWithDefault(msg, 7, 0),
    telephone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    city: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.User}
 */
proto.douyin.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.User;
  return proto.douyin.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.User}
 */
proto.douyin.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShortid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBirthday(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelephone(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getShortid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGender();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getBirthday();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTelephone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.douyin.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.User} returns this
 */
proto.douyin.User.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 shortId = 2;
 * @return {number}
 */
proto.douyin.User.prototype.getShortid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.User} returns this
 */
proto.douyin.User.prototype.setShortid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string nickName = 3;
 * @return {string}
 */
proto.douyin.User.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.User} returns this
 */
proto.douyin.User.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 gender = 4;
 * @return {number}
 */
proto.douyin.User.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.User} returns this
 */
proto.douyin.User.prototype.setGender = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string Signature = 5;
 * @return {string}
 */
proto.douyin.User.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.User} returns this
 */
proto.douyin.User.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 Level = 6;
 * @return {number}
 */
proto.douyin.User.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.User} returns this
 */
proto.douyin.User.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 Birthday = 7;
 * @return {number}
 */
proto.douyin.User.prototype.getBirthday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.douyin.User} returns this
 */
proto.douyin.User.prototype.setBirthday = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string Telephone = 8;
 * @return {string}
 */
proto.douyin.User.prototype.getTelephone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.User} returns this
 */
proto.douyin.User.prototype.setTelephone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string city = 14;
 * @return {string}
 */
proto.douyin.User.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.User} returns this
 */
proto.douyin.User.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.douyin.Gift.prototype.toObject = function(opt_includeInstance) {
  return proto.douyin.Gift.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.douyin.Gift} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Gift.toObject = function(includeInstance, msg) {
  var f, obj = {
    describe: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.douyin.Gift}
 */
proto.douyin.Gift.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.douyin.Gift;
  return proto.douyin.Gift.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.douyin.Gift} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.douyin.Gift}
 */
proto.douyin.Gift.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescribe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.douyin.Gift.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.douyin.Gift.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.douyin.Gift} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.douyin.Gift.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescribe();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string describe = 2;
 * @return {string}
 */
proto.douyin.Gift.prototype.getDescribe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.douyin.Gift} returns this
 */
proto.douyin.Gift.prototype.setDescribe = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


// goog.object.extend(exports, proto.douyin);
export default proto.douyin